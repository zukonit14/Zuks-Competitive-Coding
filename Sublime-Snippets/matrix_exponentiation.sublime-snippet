<snippet>
	<content><![CDATA[
vector<ll>b,c;      // b stores first M terms and c coefficients if needed;

//Multiplication of two matrix
//A --> k*K
//b --> k*k
//return C = A*B --> k*k
vector<vector<ll>>mul(vector<vector<ll>> A, vector<vector<ll>> B)
{
    vector<vector<ll>>C(m + 1, vector<ll>(m + 1));
    for (int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            for (int x = 1; x <= m; x++)
                C[i][j] = add(C[i][j] , mul(A[i][x], B[x][j]));
        }
    }
    return C;
}

//Finding T^n-1 using matrix exponentiation
vector<vector<ll>> pow(vector<vector<ll>> A, ll p)
{
    if (p == 1)
        return A;
    if (p & 1)
        return mul(A, pow(A, p - 1));
    vector<vector<ll> > X = pow(A, p / 2);
    return mul(X, X);
}
ll compute(ll n)
{
    // Base Case;
    if (n == 0)
        return 0;
    // If N is less than K then we have already computed first M terms;
    if (n <= m)
        return b[n - 1];

    // Determine F1 vector;
    vector<ll>F1(m + 1);
    // 1-based indexing;
    for (int i = 1; i <= m; i++)
        F1[i] = b[i - 1];

    // Create Transformation Matrix;
    vector<vector<ll>>T(m + 1, vector<ll>(m + 1));
    for (int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (i < m)
            {
                //Put 1 in all (i,j+1) positions
                if (j == i + 1)
                    T[i][j] = 1;
                else
                    T[i][j] = 0;
            }
            else    // last row;
            {
                //if i == k i.e. last row
                //For last row, put the coefficient vector
                if (j == 1 || j == m)
                    T[i][j] = 1;
                else
                    T[i][j] = 0;
            }
        }
    }

    // Use Matrix Expo
    T = pow(T, n - 1);

    // Answer is first row of T^(n-1) * F1;
    ll res = 0;
    for (int i = 1; i <= m; i++)
    {
        res = add(res , mul(T[1][i], F1[i]));
    }
    return res;
}
//for (int i = 1; i <= m; i++)
//     b.pb(dp[i]);
// cout << compute(n) << "\n";
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrixexpo</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
